<?php

namespace App\Http\Controllers;

use Illuminate\Foundation\Auth\Access\AuthorizesRequests;
use Illuminate\Foundation\Validation\ValidatesRequests;
use Illuminate\Routing\Controller as BaseController;

/**
 * Contr√¥leur de base BiblioTech - S√©ance 1
 * 
 * üéì CONCEPT P√âDAGOGIQUE : H√©ritage et Traits Laravel
 * 
 * Cette classe illustre des concepts importants :
 * 1. H√âRITAGE : Nos contr√¥leurs h√©ritent de BaseController Laravel
 * 2. TRAITS : Ajout de fonctionnalit√©s via AuthorizesRequests et ValidatesRequests
 * 3. M√âTHODES COMMUNES : Utilitaires partag√©s par tous les contr√¥leurs
 * 
 * Utilis√©e par : HomeController, BookController
 * √âvolution : En S√©ance 2, nous ajouterons plus de m√©thodes communes
 */
class Controller extends BaseController
{
    use AuthorizesRequests, ValidatesRequests;
    
    /**
     * G√©rer les erreurs 404 avec message personnalis√©
     * 
     * Utilis√©e dans BookController::show() pour livre non trouv√©
     * 
     * @param string $message Message d'erreur personnalis√©
     * @throws \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
     */
    protected function notFound(string $message = 'Ressource non trouv√©e'): void
    {
        abort(404, $message);
    }
    
    /**
     * Messages flash pour les redirections (S√©ances futures)
     * 
     * Ces m√©thodes seront utilis√©es en S√©ance 3 pour les op√©rations CRUD
     */
    protected function flashSuccess(string $message): void
    {
        session()->flash('alert', [
            'type' => 'success',
            'message' => $message
        ]);
    }
    
    protected function flashError(string $message): void
    {
        session()->flash('alert', [
            'type' => 'danger', 
            'message' => $message
        ]);
    }
    
    protected function flashInfo(string $message): void
    {
        session()->flash('alert', [
            'type' => 'info',
            'message' => $message
        ]);
    }
    
    /**
     * R√©ponse JSON standardis√©e (S√©ance 8 - API)
     * 
     * @param array $data Donn√©es √† retourner
     * @param int $status Code de statut HTTP
     * @return \Illuminate\Http\JsonResponse
     */
    protected function jsonResponse(array $data, int $status = 200): \Illuminate\Http\JsonResponse
    {
        return response()->json([
            'success' => $status >= 200 && $status < 300,
            'data' => $data,
            'timestamp' => now()->toISOString()
        ], $status);
    }
    
    /**
     * Validation commune des donn√©es
     * Exemple d'utilisation des traits ValidatesRequests
     */
    protected function validateBookData(array $data): array
    {
        // Cette m√©thode sera d√©velopp√©e en S√©ance 2
        return $data;
    }
}